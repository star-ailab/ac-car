import torch
import torch.nn.functional as F
from MalConv import MalConv
from ember import predict_sample
import lightgbm as lgb
import numpy as np
import threading
import time
import warnings
warnings.filterwarnings("error")

MALCONV_MODEL_PATH = 'detectors/malconv.checkpoint'
NONNEG_MODEL_PATH = 'detectors/nonneg.checkpoint'
EMBER_MODEL_PATH = 'detectors/ember_model.txt'
 

outputs = None
# def check(model):
#     with torch.no_grad():
#         global outputs
#         outputs = F.softmax(model(_inp), dim=-1)
#         outputs.detach().numpy()[0,1] > 0.5

def check(model):
    global outputs
    try:
        outputs = predict_sample(model, bytez)
    except RuntimeWarning:
        outputs = None # Leif could not parse
    
    
if __name__ == '__main__':
    
    import sys
    import os
#     model = MalConv(channels=256, window_size=512, embd_size=8).train()
#     weights = torch.load(MALCONV_MODEL_PATH,map_location='cpu')
#     model.load_state_dict( weights['model_state_dict'])
    
    #Ember
    model = lgb.Booster(model_file= EMBER_MODEL_PATH)
    thresh=0.8336
    
    exe_data = os.listdir(exe_path)
    for file_name in exe_data:
        with open (exe_path+file_name,"rb") as f:
            bytez = f.read()
            #buffer = np.frombuffer(bytez,dtype=np.uint8)[np.newaxis,:]
            #_inp = torch.from_numpy(buffer)
            thread = threading.Thread(target=check, args=(model,))
            thread.start()
            thread.join()
            if outputs < 0.8336:
                print(file_name)
                #print(outputs)
                
    # thresholds are set here
    #nonneg_malconv = MalConvModel( NONNEG_MODEL_PATH, thresh=0.35, name='nonneg_malconv' )
    
        
        
        
        
        
        